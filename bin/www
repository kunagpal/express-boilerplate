var path = require('path'),
	http = require('http'),

	_ = require('lodash'),
	debug = require('debug'),
	mongodb = require('mongodb').MongoClient,
	utils = require(path.join(__dirname, '..', 'utils', 'misc')),

	port,
	app,
	server,
	name = require(path.join(__dirname, '..', 'package')).name,
	bugger = debug(`${name}:server`),

	onError = function (error) {
		if (error.syscall !== 'listen') {
			throw error;
		}

		var bind = _.isString(port) ? `Pipe ${port}` : `Port ${port}`;

		// handle specific listen errors with friendly messages
		switch (error.code) {
		case 'EACCES':
			throw new Error(`${bind} requires elevated privileges`);
		case 'EADDRINUSE':
			throw new Error(`${bind} is already in use`);
		default:
			throw error;
		}
	},
	onListening = function () {
		var address = server.address(),
			bind = _.isString(address) ? `pipe ${address}` : `port ${address.port}`;

		bugger(`Listening on ${bind}`);
	},
	onSigint = function () {
		db.close();
		process.exit(0);
	};

process.env.NODE_ENV ? utils.checkVars() : require('dotenv').load();

process.on('SIGINT', onSigint);
port = _.toInteger(process.env.PORT);

module.exports = function (done) {
	mongodb.connect(process.env.MONGO_URI, function (err, database) {
		if (err) {
			throw err;
		}

		global.db = database;

		app = require(path.join(__dirname, '..', 'app'));
		app.set('port', port);

		server = http.createServer(app);
		server.on('error', onError);
		server.on('listening', onListening);

		server.listen(port);
		done();
	});
};

!module.parent && module.exports(_.noop);
