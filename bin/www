var path = require('path'),
	http = require('http'),

	_ = require('lodash'),
	mongodb = require('mongodb').MongoClient,
	debug = require('debug')('express-boilerplate:server'),
	utils = require(path.join(__dirname, '..', 'utils', 'misc')),

	port,
	app,
	server,

	onError = function (error) {
		var bind;

		if (error.syscall !== 'listen') {
			throw error;
		}

		bind = _.isString(port) ? `Pipe ${port}` : `Port ${port}`;

		// handle specific listen errors with friendly messages
		switch (error.code) {
		case 'EACCES':
			throw new Error(`${bind} requires elevated privileges`);
		case 'EADDRINUSE':
			throw new Error(`${bind} is already in use`);
		default:
			throw error;
		}
	},
	onListening = function () {
		var addr = server.address(),
			bind = _.isString(addr) ? `pipe ${addr}` : `port ${addr.port}`;

		debug(`Listening on ${bind}`);
	};

if (process.env.NODE_ENV) {
	utils.checkVars();
}
else {
	require('dotenv').load();
}

port = _.toInteger(process.env.PORT) || 3000;

mongodb.connect(process.env.MONGO_URI, function (err, database) {
	if (err) {
		throw err;
	}

	global.db = database;

	app = require(path.join(__dirname, '..', 'app'));
	app.set('port', port);

	server = http.createServer(app);
	server.on('error', onError);
	server.on('listening', onListening);

	server.listen(port);
});
